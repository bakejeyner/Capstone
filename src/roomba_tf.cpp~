#include <ros/ros.h>
#include <tf/transform_broadcaster.h>

#include "roomba_decision/RoombaCommand.h"

/*
void roombaCallback(const roomba_decision::RoombaCommand& msg){
  static tf::TransformBroadcaster br;
  tf::Transform transform;
  transform.setOrigin( tf::Vector3(0, 0, 0.0) );
  tf::Quaternion q;
  q.setRPY(0, 0, msg->theta);
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", turtle_name));
}
*/

int main(int argc, char** argv){
  ros::init(argc, argv, "roomba_tf");

  //ros::NodeHandle node;
  //ros::Subscriber sub = node.subscribe("/RoombaCommand", 10, &roombaCallback);

  ros::Rate loop_rate(10);

  for(;;;)
  {
    static tf::TransformBroadcaster br;
    tf::Transform transform;
    transform.setOrigin( tf::Vector3(0, 0, 0.0) );
    tf::Quaternion q;
    q.setRPY(0, 0, 0);
    transform.setRotation(q);
    br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "room", "roomba"));
    loop_rate.sleep();
  }
  
  //ros::spin();
  return 0;
};
